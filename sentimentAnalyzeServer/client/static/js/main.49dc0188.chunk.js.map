{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","React","Component","render","_jsx","children","Table","className","style","width","marginLeft","TableBody","Object","entries","this","props","emotions","map","mapentry","_jsxs","TableRow","TableCell","backgroundColor","App","constructor","arguments","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderOutput","input_mode","setState","sendForSentimentAnalysis","url","document","getElementById","value","fetch","then","response","json","data","label","output","color","fontSize","sendForEmotionAnalysis","marginTop","Card","elevation","CardContent","Typography","variant","fontFamily","Button","onClick","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.49dc0188.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\nimport { Table, TableBody, TableCell, TableRow } from '@mui/material';\n\nclass EmotionTable extends React.Component {\n    render() {\n      //Returns the emotions as an HTML table\n      return (  \n        <div>\n          <Table className=\"table table-bordered\" style={{width:\"50%\", marginLeft:\"200px\"}}>\n            <TableBody>\n            {\n                Object.entries(this.props.emotions).map(function(mapentry) {\n                        return (\n                            <TableRow>\n                            <TableCell style={{backgroundColor:\"white\"}}>{mapentry[0]}</TableCell>\n                            <TableCell style={{backgroundColor:\"white\"}}>{mapentry[1]}</TableCell>\n                            </TableRow>\n                        )\n                })\n            }\n            </TableBody>\n          </Table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport { Card, CardContent, Typography } from '@mui/material';\n\nclass App extends React.Component {\n  /*The initial input modeis set to text\n  */\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  /*\n  This method returns the component based on what the input mode is.\n  If the requested input mode is \"text\" it returns a textbox with 4 rows.\n  If the requested input mode is \"url\" it returns a textbox with 1 row.\n  */\n \n  renderOutput = (input_mode)=>{\n    let rows = 1\n    let mode = \"url\"\n    //If the input mode is text make it 4 lines\n    if(input_mode === \"text\"){\n      mode = \"text\"\n      rows = 4\n    }\n      this.setState({innercomp:<textarea rows={rows} cols=\"50\" id=\"textinput\"/>,\n      mode: mode,\n      sentimentOutput:[],\n      sentiment:true\n      });\n  } \n  \n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let url = \".\";\n    let mode = this.state.mode\n    url = url+\"/\" + mode + \"/sentiment?\"+ mode + \"=\"+document.getElementById(\"textinput\").value;\n\n    fetch(url).then((response)=>{\n        response.json().then((data)=>{\n        this.setState({sentimentOutput:data.label});\n        let output = data.label;\n        let color = \"white\"\n        switch(output) {\n          case \"positive\": color = \"green\";break;\n          case \"negative\": color = \"red\";break;\n          case \"neutral\": color = \"yellow\";break;\n          default: color = \"black\";\n        }\n        output = <div style={{color:color,fontSize:20}}>{output}</div>\n        this.setState({sentimentOutput:output});\n      })});\n  }\n\n  sendForEmotionAnalysis = () => {\n\n    this.setState({sentiment:false});\n    let url = \".\";\n    let mode = this.state.mode\n    url = url+\"/\" + mode + \"/emotion?\"+ mode + \"=\"+document.getElementById(\"textinput\").value;\n\n    fetch(url).then((response)=>{\n      response.json().then((data)=>{\n      this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\n  })})  ;\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n        <div style={{marginTop:\"20px\"}}>\n            <Card style={{width:\"50%\", marginLeft:\"400px\", backgroundColor:\"#fafafa\"}} elevation={3}>\n                <CardContent>\n                    <Typography variant=\"h4\">Welcome to Sentiment Analyze App</Typography>\n                    <div style={{marginTop:\"20px\"}}>\n                        <Typography style={{fontSize:\"14px\", color:\"#212121\",fontFamily:\"Roboto\"}}>Try to conduct sentiment analysis or emotions by choosing Text or URL</Typography>\n                        <div style={{marginTop:\"10px\"}}>\n                            <Button variant=\"contained\" style={{backgroundColor:\"#085696\", }} onClick={()=>{this.renderOutput('text')}}>Text</Button>\n                            <Button variant=\"contained\" style={{marginLeft:\"20px\", backgroundColor:\"#595959\"}}  onClick={()=>{this.renderOutput('url')}}>URL</Button>\n                        </div>\n                    </div>\n                        <br/><br/>\n                        <Typography style={{fontFamily:\"bold\"}}>Before receiving the sentiment analysis or emotions, make sure to type the text or url</Typography>\n                        {this.state.innercomp}\n                        <br/>\n                        <div style={{marginTop:\"10px\"}}>\n                            <Button variant=\"contained\" style={{backgroundColor:\"#3D5E1C\"}} onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</Button>\n                            <Button variant=\"contained\" style={{backgroundColor:\"#2E662F\",marginLeft:\"20px\"}} onClick={this.sendForEmotionAnalysis}>Analyze Emotion</Button>\n                        </div>\n                        <br/>\n                        {this.state.sentimentOutput}\n                    </CardContent>\n            </Card>\n        </div>\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}